// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/movie.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "cinema/internal/models"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockstoreMovie is a mock of storeMovie interface.
type MockstoreMovie struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMovieMockRecorder
}

// MockstoreMovieMockRecorder is the mock recorder for MockstoreMovie.
type MockstoreMovieMockRecorder struct {
	mock *MockstoreMovie
}

// NewMockstoreMovie creates a new mock instance.
func NewMockstoreMovie(ctrl *gomock.Controller) *MockstoreMovie {
	mock := &MockstoreMovie{ctrl: ctrl}
	mock.recorder = &MockstoreMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstoreMovie) EXPECT() *MockstoreMovieMockRecorder {
	return m.recorder
}

// AddMovieActorRelations mocks base method.
func (m *MockstoreMovie) AddMovieActorRelations(tx *sql.Tx, movieID uuid.UUID, actorIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMovieActorRelations", tx, movieID, actorIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMovieActorRelations indicates an expected call of AddMovieActorRelations.
func (mr *MockstoreMovieMockRecorder) AddMovieActorRelations(tx, movieID, actorIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMovieActorRelations", reflect.TypeOf((*MockstoreMovie)(nil).AddMovieActorRelations), tx, movieID, actorIDs)
}

// BeginTransaction mocks base method.
func (m *MockstoreMovie) BeginTransaction() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockstoreMovieMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockstoreMovie)(nil).BeginTransaction))
}

// CheckActorsExist mocks base method.
func (m *MockstoreMovie) CheckActorsExist(actorIDs []uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckActorsExist", actorIDs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckActorsExist indicates an expected call of CheckActorsExist.
func (mr *MockstoreMovieMockRecorder) CheckActorsExist(actorIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckActorsExist", reflect.TypeOf((*MockstoreMovie)(nil).CheckActorsExist), actorIDs)
}

// CheckMovieExists mocks base method.
func (m *MockstoreMovie) CheckMovieExists(movieID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckMovieExists", movieID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMovieExists indicates an expected call of CheckMovieExists.
func (mr *MockstoreMovieMockRecorder) CheckMovieExists(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMovieExists", reflect.TypeOf((*MockstoreMovie)(nil).CheckMovieExists), movieID)
}

// CreateMovie mocks base method.
func (m *MockstoreMovie) CreateMovie(tx *sql.Tx, movie models.CreateMovie) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", tx, movie)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockstoreMovieMockRecorder) CreateMovie(tx, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockstoreMovie)(nil).CreateMovie), tx, movie)
}

// DeleteMovie mocks base method.
func (m *MockstoreMovie) DeleteMovie(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockstoreMovieMockRecorder) DeleteMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockstoreMovie)(nil).DeleteMovie), id)
}

// GetMovieByID mocks base method.
func (m *MockstoreMovie) GetMovieByID(id uuid.UUID) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID.
func (mr *MockstoreMovieMockRecorder) GetMovieByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockstoreMovie)(nil).GetMovieByID), id)
}

// GetMoviesByActorID mocks base method.
func (m *MockstoreMovie) GetMoviesByActorID(actorID uuid.UUID, limit, offset int) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesByActorID", actorID, limit, offset)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesByActorID indicates an expected call of GetMoviesByActorID.
func (mr *MockstoreMovieMockRecorder) GetMoviesByActorID(actorID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesByActorID", reflect.TypeOf((*MockstoreMovie)(nil).GetMoviesByActorID), actorID, limit, offset)
}

// GetMoviesWithFilters mocks base method.
func (m *MockstoreMovie) GetMoviesWithFilters(sortBy, order string, limit, offset int) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesWithFilters", sortBy, order, limit, offset)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesWithFilters indicates an expected call of GetMoviesWithFilters.
func (mr *MockstoreMovieMockRecorder) GetMoviesWithFilters(sortBy, order, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesWithFilters", reflect.TypeOf((*MockstoreMovie)(nil).GetMoviesWithFilters), sortBy, order, limit, offset)
}

// RemoveMovieActorRelations mocks base method.
func (m *MockstoreMovie) RemoveMovieActorRelations(tx *sql.Tx, movieID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMovieActorRelations", tx, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMovieActorRelations indicates an expected call of RemoveMovieActorRelations.
func (mr *MockstoreMovieMockRecorder) RemoveMovieActorRelations(tx, movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMovieActorRelations", reflect.TypeOf((*MockstoreMovie)(nil).RemoveMovieActorRelations), tx, movieID)
}

// RemoveSelectedMovieActorRelations mocks base method.
func (m *MockstoreMovie) RemoveSelectedMovieActorRelations(tx *sql.Tx, movieID uuid.UUID, actorIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSelectedMovieActorRelations", tx, movieID, actorIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSelectedMovieActorRelations indicates an expected call of RemoveSelectedMovieActorRelations.
func (mr *MockstoreMovieMockRecorder) RemoveSelectedMovieActorRelations(tx, movieID, actorIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSelectedMovieActorRelations", reflect.TypeOf((*MockstoreMovie)(nil).RemoveSelectedMovieActorRelations), tx, movieID, actorIDs)
}

// SearchMoviesByTitleAndActor mocks base method.
func (m *MockstoreMovie) SearchMoviesByTitleAndActor(titleFragment, actorNameFragment string, limit, offset int) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMoviesByTitleAndActor", titleFragment, actorNameFragment, limit, offset)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMoviesByTitleAndActor indicates an expected call of SearchMoviesByTitleAndActor.
func (mr *MockstoreMovieMockRecorder) SearchMoviesByTitleAndActor(titleFragment, actorNameFragment, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMoviesByTitleAndActor", reflect.TypeOf((*MockstoreMovie)(nil).SearchMoviesByTitleAndActor), titleFragment, actorNameFragment, limit, offset)
}

// UpdateMovie mocks base method.
func (m *MockstoreMovie) UpdateMovie(tx *sql.Tx, id uuid.UUID, movie models.UpdateMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", tx, id, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockstoreMovieMockRecorder) UpdateMovie(tx, id, movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockstoreMovie)(nil).UpdateMovie), tx, id, movie)
}
